// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  firstName       String
  lastName        String?
  password        String
  phoneNumber     String?
  emailVerifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  profile  Profile?
  orders   Order[]
  products UserToProducts[] // active/subscribed products
}

model Profile {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @id

  gender           Gender?
  birthDate        DateTime?
  companyName      String?
  companyPosition  String?
  preferredTheme   String    @default("system")
  stripeCustomerId String?

  addresses Address[]
}

model Address {
  id            Int      @id
  profile       Profile? @relation(fields: [profileUserId], references: [userId])
  profileUserId Int?

  firstName String?
  lastName  String?
  email     String?
  address   String
  address2  String?
  city      String
  state     String?
  zip       String?
  country   String
}

model Product {
  id               Int         @id @default(autoincrement())
  name             String
  slug             String      @unique
  shortDescription String?
  description      String?
  productType      ProductType @default(OnlineService)
  prices           Json[]
  images           Json        @default("[]")
  stripeId         String?     @unique

  categories Category[]
  users      UserToProducts[] // subscribed users

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserToProducts {
  id String @id @default(uuid())

  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  status         UserProductStatus @default(Inactive)
  subscriptionId String            @unique // stripe

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId, productId])
}

model Category {
  id       Int       @id @default(autoincrement())
  title    String
  slug     String
  products Product[]
}

model Order {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  billingFirstName String
  billingLastName  String
  billingEmail     String
  billingAddress   String
  billingAddress2  String?
  billingCity      String
  billingState     String
  billingZip       String
  billingCountry   String

  shippingFirstName String
  shippingLastName  String
  shippingAddress   String
  shippingAddress2  String?
  shippingCity      String
  shippingState     String
  shippingZip       String
  shippingCountry   String

  items   Json[]
  coupons CouponCode[]
  status  OrderStatus  @default(Pending)
  notes   String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CouponCode {
  id    Int    @id @default(autoincrement())
  title String
  code  String

  type               CouponType @default(Flat)
  flatDiscount       Decimal
  percentageDiscount Int

  maxUses   Int?
  expiresAt DateTime?
  active    Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orders Order[]
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NOT_SPECIFIED
}

enum ProductType {
  OnlineService // subscription based
  Physical // usually shipped
}

enum OrderStatus {
  Pending // waiting for payment
  Paid
  Shipped
  Completed
  OnHold
  Cancelled
}

enum CouponType {
  Flat
  Percentage
}

enum UserProductStatus {
  Active
  Inactive
}
