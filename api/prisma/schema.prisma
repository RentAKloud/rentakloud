// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  firstName       String
  lastName        String?
  password        String
  phoneNumber     String?
  emailVerifiedAt DateTime?
  //
  type            UserType         @default(User)
  //
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  //
  profile         Profile?
  orders          Order[]
  products        UserToProducts[] // active/subscribed products
  diskImages      DiskImage[]
  notifications   Notification[]
}

enum UserType {
  Admin
  User
  Staff
}

model Profile {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @id

  gender           Gender?
  birthDate        DateTime?
  companyName      String?
  companyPosition  String?
  preferredTheme   String    @default("system")
  stripeCustomerId String?

  addresses Address[]
}

model Address {
  id            Int      @id
  profile       Profile? @relation(fields: [profileUserId], references: [userId])
  profileUserId Int?
  //
  firstName     String?
  lastName      String?
  email         String?
  address       String
  address2      String?
  city          String
  state         String?
  zip           String?
  country       String
}

model Notification {
  id        String             @id @default(uuid())
  //
  user      User               @relation(fields: [userId], references: [id])
  userId    Int
  //
  title     String
  body      String
  status    NotificationStatus @default(Created)
  //
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now())
}

enum NotificationStatus {
  Created
  Sent // to be Sent is to be rendered at a client-side frontend
  Notified // to be Notified is to be explicitly alerted using means such as popups, audio or push notification
  Read
  Failed
}

model Product {
  id                Int              @id @default(autoincrement())
  name              String
  slug              String           @unique
  shortDescription  String?
  description       String?
  descriptionEditor Json?
  contentAfterPrice String?
  productType       ProductType      @default(OnlineService)
  prices            Json[]
  stock             Int              @default(1)
  images            Json             @default("[]")
  stripeId          String?          @unique
  //
  categories        Category[]
  users             UserToProducts[] // subscribed users
  //
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now())
  //
  taxRates          TaxRate[]
}

// Instance configurations (also used as plans)
// model Config {
//   id           Int    @id @default(autoincrement())
//   name         String
//   monthlyPrice Float
//   yearlyPrice  Float
// }

model UserToProducts {
  id             String            @id @default(uuid())
  //
  user           User              @relation(fields: [userId], references: [id])
  userId         Int
  product        Product           @relation(fields: [productId], references: [id])
  productId      Int
  //
  status         UserProductStatus @default(Inactive)
  subscriptionId String            @unique // stripe
  //
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())

  @@index([userId, productId])
}

model Category {
  id       Int       @id @default(autoincrement())
  title    String
  slug     String
  products Product[]
  taxRates TaxRate[]
}

model Order {
  id                Int                 @id @default(autoincrement())
  user              User                @relation(fields: [userId], references: [id])
  userId            Int
  //
  billingFirstName  String
  billingLastName   String
  billingEmail      String
  billingPhone      String              @default("")
  billingAddress    String
  billingAddress2   String?
  billingCity       String
  billingState      String
  billingZip        String
  billingCountry    String
  //
  shippingFirstName String
  shippingLastName  String
  shippingAddress   String
  shippingAddress2  String?
  shippingCity      String
  shippingState     String
  shippingZip       String
  shippingCountry   String
  //
  items             Json[]
  coupons           CouponCodeToOrder[]
  taxes             Json                @default("[]")
  status            OrderStatus         @default(Pending)
  // paymentMethod     PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  notes             String
  // Final amount that should be/was charged. This is just for historical record
  // otherwise this amount can be calculated using total from items, shipping costs and coupons
  amount            Decimal?            @db.Decimal(10, 2)
  //
  paidAt            DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  // paymentMethodId   Int
}

model CouponCode {
  id                 Int                 @id @default(autoincrement())
  title              String
  code               String
  //
  type               CouponType          @default(Flat)
  flatDiscount       Decimal             @db.Decimal(10, 2)
  percentageDiscount Int
  //
  maxUses            Int?
  startsAt           DateTime?
  expiresAt          DateTime?
  active             Boolean             @default(true)
  //
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  //
  orders             CouponCodeToOrder[]
}

model CouponCodeToOrder {
  id                 String     @id @default(uuid())
  //
  order              Order      @relation(fields: [orderId], references: [id])
  orderId            Int
  couponCode         CouponCode @relation(fields: [couponCodeId], references: [id])
  couponCodeId       Int
  //
  title              String
  code               String
  type               CouponType
  flatDiscount       Decimal   @db.Decimal(10, 2)
  percentageDiscount Int
}

model TaxRate {
  id          Int     @id @default(autoincrement())
  countryCode String? @db.Char(2) // leave blank to apply to all
  stateCode   String? @db.Char(2)
  zip         String?
  city        String?
  //
  rate        Decimal @db.Decimal(10, 6)
  name        String
  //
  compound    Boolean @default(false) // compund rates are applied on top of other tax rates
  shipping    Boolean @default(true) // does it applies to shipping
  priority    Int     @default(1)

  products     Product[]
  productTypes ProductType[]
  categories   Category[]
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NOT_SPECIFIED
}

enum ProductType {
  OnlineService // subscription based
  Physical // usually shipped
}

enum OrderStatus {
  Pending // waiting for payment
  Paid
  Shipped
  Completed
  OnHold
  Cancelled
}

enum CouponType {
  Flat
  Percentage
}

enum UserProductStatus {
  Active
  Inactive
}

model DiskImage {
  id          Int   @id @default(autoincrement())
  createdBy   User? @relation(fields: [createdById], references: [id]) // if absent, means system generated (and is visible to all)
  createdById Int?

  name        String
  format      DiskImageFormat
  description String?
  tags        String[]
  path        String
  os          DiskImageOS
  osName      String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum DiskImageFormat {
  QCOW2
  VHDX
  DMG
  ISO
  VDI
  IMG
}

enum DiskImageOS {
  Linux
  Windows
  macOS
}

// model PaymentMethod {
//   id     Int     @id @default(autoincrement())
//   name   String
//   orders Order[]
// }

// model ShippingZone {
//   id   Int    @id @default(autoincrement())
//   name String
//   //
//   country String
//   state String
//   city String
//   zip String
//   //
//   shippingMethods Json
// }

// model ShippingMethods {
//   id   Int    @id @default(autoincrement())
//   name String
//   type String // free, local, flat
// }
